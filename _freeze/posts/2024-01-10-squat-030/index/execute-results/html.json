{
  "hash": "474b03de5b1d8c48f32dbb34bb4cfa32",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"squat 0.3.0\"\ndescription: |\n  An implementation of statistical tools for the analysis of 3D rotation-valued \n  time series and functional data. It relies on pre-existing quaternion data \n  structure provided by the 'Eigen' 'C++' library.\nauthor:\n  - name: Aymeric Stamm\n    url: https://astamm.github.io\n    affiliation: Department of Mathematics Jean Leray, UMR CNRS 6629\n    affiliation_url: https://www.math.sciences.univ-nantes.fr\n    orcid_id: 0000-0002-8725-3654\ndate: 2024-01-10\ncategories: [software, rotation-valued functional data]\nimage: ../../images/squat_anim.gif\n---\n\n\n\n\n## Overview\n\nThe goal of [**squat**](https://lmjl-alea.github.io/squat/) is to provide\nextensions of common statistical methods for the analysis of rotation-valued\ntime series and functional data. Three-dimensional rotations can be represented\nin at least five different ways:\n\n- $3\\times 3$ symmetric definite positive matrices with unit determinant;\n- pair of axis (3D unit vector) and angle (real) of rotation;\n- Euler angles;\n- Tait-Bryan angles;\n- Unit quaternions.\n\nThis package mainly focuses on methods in which rotations are represented via\nunit quaternions. To this end, it exploits the excellent [API for\nquaternions](https://eigen.tuxfamily.org/dox/classEigen_1_1Quaternion.html)\navailable as part of the\n[Eigen](https://eigen.tuxfamily.org/index.php?title=Main_Page) library.\n\nThe package is currently structured into 8 sections:\n\n- [*New class for QTS.*](https://lmjl-alea.github.io/squat/reference/index.html#qts-class) A collection of functions that define the [`qts`] class for storing quaterion time series (QTS). It provides tools for centering and standardizing a single QTS and for visualizing a single QTS.\n- [*New class for QTS sample.*](https://lmjl-alea.github.io/squat/reference/index.html#qts-sample-class) A collection of functions that define the [`qts_sample`] class for storing samples of QTS. It provides tools to (i) randomly sample QTS with Gaussian noise on the QTS logarithm, (ii) center and standarize samples, (iii) compute the mean or median and (iv) visualize samples of QTS.\n- [*QTS Wrangling.*](https://lmjl-alea.github.io/squat/reference/index.html#qts-wrangling)\nA collection of functions to manipulate QTS: differentiation, straightening,\nlogarithm and exponential maps, reorientation, normalization, resampling,\nsmoothing, hemispherization, moving average.\n- [*Transformations of QTS.*](https://lmjl-alea.github.io/squat/reference/index.html#qts-transformations) A collection of functions to transform QTS into real-valued time series: (i) distance time series (pointwise geodesic distance between two input QTS at each time point), norm time series, angle time series (angle between the first and other attitudes at each time point) and angular velocity time series.\n- [*Principal Component Analysis.*](https://lmjl-alea.github.io/squat/reference/index.html#principal-component-analysis) An `S3` specialization of the [`prcomp()`](https://lmjl-alea.github.io/squat/reference/prcomp.qts_sample.html) method for QTS samples with visualization tools. It performs PCA in the Lie algebra of the 3-sphere.\n- [*Clustering.*](https://lmjl-alea.github.io/squat/reference/index.html#principal-component-analysis) A collection of functions to perform clustering of a sample of QTS. It includes (i) an `S3` specialization of the [`kmeans()`](https://lmjl-alea.github.io/squat/reference/kmeans.html) method for QTS samples, (ii) an `S3` specialization of the [`hclust()`](https://lmjl-alea.github.io/squat/reference/hclust.html) method for QTS samples and (iii) an `S3` specialization of the [`dbscan()`](https://lmjl-alea.github.io/squat/reference/dbscan.html) method for QTS samples. All clustering algorithms return an object of class `qtsclust` which can be visualized via `S3` specializations of the [`ggplot2::autoplot()`](https://lmjl-alea.github.io/squat/reference/autoplot.qtsclust.html) and [`plot()`](https://lmjl-alea.github.io/squat/reference/plot.qtsclust.html) methods.\n- [*Distance matrix computation.*](https://lmjl-alea.github.io/squat/reference/index.html#distances) An `S3` specialization of the [`dist()`](https://lmjl-alea.github.io/squat/reference/dist.html) method for computing a pairwise distance matrix from a QTS sample using either the $L^2$ distance or a Pearson-based distance or the dynamic time warping metric from time series analysis.\n- [*Data sets.*](https://lmjl-alea.github.io/squat/reference/index.html#datasets) Two datasets for illustrations, examples and case studies.\n\n## Installation\n\nYou can install the package directly from CRAN:\n```r\ninstall.packages(\"squat\")\n```\nor you can choose to install the development version from GitHub:\n```r\n# install.packages(\"remotes\")\nremotes::install_github(\"LMJL-Alea/squat\")\n```\n\nThe package has its own webpage: https://lmjl-alea.github.io/squat/.\n\n## News in `v0.3.0`\n\n### New features\n\n* Added `S3` specialization of the `stats::predict()` function for `prcomp_qts` \nobjects.\n* Added function `qts2aats()` which allows to switch from quaternion to \naxis-angle representation of rotations.\n* Added usual operations `+`, `-`, `*` and `inverse_qts()` for quaternion time \nseries using the [Eigen](https://eigen.tuxfamily.org/index.php?title=Main_Page) \nlibrary.\n\n### Small improvements\n\n* Make sure quaternion geodesic mean is not flipped.\n* Fix issues in PCA:\n  - avoid numerical overflows due to bad choice of `k` in `gam()`;\n  - improved documentation;\n  - Use same number of basis functions in uni- and multivariate decompositions.\n* Updated GHA scripts and `README`.\n* Fix bug related to Rcpp following [RcppCore/Rcpp#1287](https://github.com/RcppCore/Rcpp/issues/1287).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}